import dotenv from 'dotenv';
import Notion from './notion.js';
import Logger from './logger.js';
import BotBase from './botBase.js';
import schedule from 'node-schedule';
import spendingTrackerAPI from '../API/spendingTrackerAPI.js';
import { message } from 'telegraf/filters';
import StatusChecker from './statusChecker.js';
dotenv.config({ override: true });

class Handlers {
    static async checkAndNotify(ctx) {
        let policies = await Notion.getNotCancelledPolicies(JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
        || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id));
        policies = await StatusChecker.getStatusESBD(policies);
        policies = await StatusChecker.getStatusOnes(policies);
        await Notion.updateNotCancelledPolicies(policies, JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
        || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id));

        const issuedOnesKeys = Object.keys(BotBase.config.API.statuses.ones)
        .filter((key) => BotBase.config.API.statuses.ones[key] === '–í—ã–ø–∏—Å–∞–Ω').map(Number);
        const issuedESBDKeys = Object.keys(BotBase.config.API.statuses.ESBD)
        .filter((key) => BotBase.config.API.statuses.ESBD[key] === '–í—ã–ø–∏—Å–∞–Ω').map(Number);

        let notification = JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
        || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id) 
        ? '–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª–∏—Å—ã –Ω–∞ PROD:' 
        : '–ü–æ–ª–∏—Å—ã –Ω–∞ PROD:';
        
        policies.forEach((policy) => {
            policy.notifications = [];
            if (policy.status.ones === 'default') policy.notifications.push('\n‚ùì—Å—Ç–∞—Ç—É—Å 1–° –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
            if (policy.status.ESBD === 'default') policy.notifications.push('\n‚ùì—Å—Ç–∞—Ç—É—Å –ï–°–ë–î –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
            if (issuedOnesKeys.includes(policy.status.ones)) {
                policy.notifications.push(JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
                || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id) 
                ? '\n‚ùó–Ω–µ –æ—Ç–º–µ–Ω—ë–Ω –≤ 1–°' 
                : '\n‚úÖ –≤—ã–ø–∏—Å–∞–Ω –≤ 1–°');
            }

            if (issuedESBDKeys.includes(policy.status.ESBD)) {
                policy.notifications.push(JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
                || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id) 
                ? '\n‚ùó–Ω–µ –æ—Ç–º–µ–Ω—ë–Ω –≤ –ï–°–ë–î' 
                : '\n‚úÖ –≤—ã–ø–∏—Å–∞–Ω –≤ –ï–°–ë–î');
            }

            if (policy.status.ESBD === '–ß–µ—Ä–Ω–æ–≤–∏–∫') policy.notifications.push('\nüìå—á–µ—Ä–Ω–æ–≤–∏–∫ –≤ –ï–°–ë–î');

            if (policy.notifications.length !== 0) {
                policy.notifications.unshift(`\n\n${policy.number}:`);
                policy.notifications.forEach((message) => notification = notification + message);
            }
        });

        if (notification.length === 24) notification = '–í—ã–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–∏—Å–æ–≤ –Ω–∞ PROD –Ω–µ—Ç';
        if (notification.length === 15) notification = '‚ùå –í—ã–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª–∏—Å–æ–≤ –Ω–∞ PROD –Ω–µ—Ç\n(—Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –ø–æ–ª–∏—Å–æ–≤ –±—ã–ª –æ—á–∏—â–µ–Ω, –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∏–ª–∏ –ø—Ä–µ–∂–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ)';

        ctx.reply(notification);
        await Logger.log('[inf] ‚ñ∂ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }

    static commands(bot, crontab) {
        let job;
        bot.command('run', async (ctx) => {
            if (JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
            || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id)) {
                ctx.deleteMessage();
                job = schedule.scheduleJob(crontab, async () => {
                    await Logger.log('[inf] ‚ñ∂ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤');
                    await this.checkAndNotify(ctx);
                });
                
                ctx.reply('Cron –∑–∞–ø—É—â–µ–Ω');
                await Logger.log('[inf] ‚ñ∂ Cron –∑–∞–ø—É—â–µ–Ω');
            }
        });

        bot.command('update', async (ctx) => {
            ctx.deleteMessage();
            await Logger.log('[inf] ‚ñ∂ –ó–∞–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤');
            await this.checkAndNotify(ctx);
        });

        bot.command('greetings', async (ctx) => {
            ctx.deleteMessage();
            await spendingTrackerAPI.auth();
            await spendingTrackerAPI.setToken();
            const response = await spendingTrackerAPI.greetings();
            ctx.reply(response.data.message);
        });

        bot.command('stop', async (ctx) => {
            if (JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
            || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id)) {
                ctx.deleteMessage();
                if (job) job.cancel();
                ctx.reply('Cron –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                await Logger.log('[inf] ‚ñ∂ Cron –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            }
        });

        bot.on(message('text'), async (ctx) => {
            for (const key of Object.keys(BotBase.config.API.endpoints.ESBD.submethods)) {
                if ((ctx.message.text.startsWith(key) 
                && !(JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
                || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id))) 
                || (ctx.message.text.startsWith(`+${key}`) 
                && (JSON.parse(process.env.ADMINS_IDS).includes(ctx.from.id) 
                || JSON.parse(process.env.ADMINS_IDS).includes(ctx.message.chat.id)))) {
                    await Notion.addPolicy(ctx);
                    ctx.reply('–ü–æ–ª–∏—Å –¥–æ–±–∞–≤–ª–µ–Ω');
                }
            }
        });
    }
}

export default Handlers;